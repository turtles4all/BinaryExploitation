0x80481c5: ret
0x80480f6: ret 0xf01
0x80482a1: ret 0x448b
0x80480fc: ret 0x8801
0x8048124: pop ebx; ret
0x80484cc: inc ecx; ret
0x804831b: pop edi; ret
0x8048546: dec esi; ret
0x804817f: adc al,0x5b; ret
0x8048357: mov eax,0x0; ret
0x80480fe: mov [eax],dl; ret
0x80482ea: add [eax],al; ret
0x80482a6: add esp,0x20; ret
0x80481c2: add esp,0x10; ret
0x80481c3: les edx,[eax]; ret
0x80482a7: les esp,[eax]; ret
0x8048544: add [edx],0x4e; ret
0x80482e6: add esp,0x4e30; ret
0x804831a: pop esi; pop edi; ret
0x80481d2: int 0x80; pop ebx; ret
0x80480f4: add al,0x83; ret 0xf01
0x804817e: les edx,[ebx+ebx*2]; ret
0x8048121: add esp,0x10; pop ebx; ret
0x804817d: add esp,0x14; pop ebx; ret
0x80482e9: dec esi; add [eax],al; ret
0x80481cf: or [ecx+0x5b80cdd3],cl; ret
0x8048122: les edx,[eax]; pop ebx; ret
0x80480fa: adc al,[ebx+0x108801c2]; ret
0x80481c0: and al,0xc; add esp,0x10; ret
0x8048319: pop ebx; pop esi; pop edi; ret
0x80482a4: and al,0x10; add esp,0x20; ret
0x80481c1: or al,0x83; les edx,[eax]; ret
0x80480fb: add edx,0x1; mov [eax],dl; ret
0x804824b: add esp,0x4; add esp,0x10; ret
0x80483be: mov eax,0x0; add esp,0x10; ret
0x8048354: add esp,0x14; mov eax,0x0; ret
0x804824d: add al,0x83; les edx,[eax]; ret
0x8048358: add [eax],al; add [eax],al; ret
0x80483c1: add [eax],al; add esp,0x10; ret
0x8048318: adc [ebx+0x5e],bl; pop edi; ret
0x80481d0: mov ebx,edx; int 0x80; pop ebx; ret
0x80480f0: add [ebx-0x7cfbdbac],ecx; ret 0xf01
0x80481be: mov eax,[esp+0xc]; add esp,0x10; ret
0x80482a2: mov eax,[esp+0x10]; add esp,0x20; ret
0x804811f: and al,0xc; add esp,0x10; pop ebx; ret
0x80481bf: inc esp; and al,0xc; add esp,0x10; ret
0x804824c: les eax,[ebx+eax*4]; les edx,[eax]; ret
0x8048120: or al,0x83; les edx,[eax]; pop ebx; ret
0x804817b: and al,0x10; add esp,0x14; pop ebx; ret
0x80482a3: inc esp; and al,0x10; add esp,0x20; ret
0x80482e7: les esi,[eax]; dec esi; add [eax],al; ret
0x80481bd: ror [ebx-0x7cf3dbbc],1; les edx,[eax]; ret
0x80480f9: mov dh,0x12; add edx,0x1; mov [eax],dl; ret
0x80483bb: add esp,0x4; mov eax,0x0; add esp,0x10; ret
0x8048316: add esp,0x10; pop ebx; pop esi; pop edi; ret
0x8048356: adc al,0xb8; add [eax],al; add [eax],al; ret
0x804811d: mov eax,[esp+0xc]; add esp,0x10; pop ebx; ret
0x80483bf: add [eax],al; add [eax],al; add esp,0x10; ret
0x8048317: les edx,[eax]; pop ebx; pop esi; pop edi; ret
0x8048179: mov eax,[esp+0x10]; add esp,0x14; pop ebx; ret
0x80481ce: and al,0x8; mov ebx,edx; int 0x80; pop ebx; ret
0x80480f8: movzx edx,[edx]; add edx,0x1; mov [eax],dl; ret
0x804811e: inc esp; and al,0xc; add esp,0x10; pop ebx; ret
0x80482e1: call 0x8048252 <read_input>; add esp,0x4e30; ret
0x804817a: inc esp; and al,0x10; add esp,0x14; pop ebx; ret
0x8048178: adc [ebx-0x7cefdbbc],cl; les edx,[ebx+ebx*2]; ret
0x8048355: les edx,[eax+edi*4]; add [eax],al; add [eax],al; ret
0x80481cc: mov edx,[esp+0x8]; mov ebx,edx; int 0x80; pop ebx; ret
0x804834f: call 0x80482ed <prctl>; add esp,0x14; mov eax,0x0; ret
0x8048246: call 0x804814d <putchar>; add esp,0x4; add esp,0x10; ret
0x8048314: and al,0xc; add esp,0x10; pop ebx; pop esi; pop edi; ret
0x8048315: or al,0x83; les edx,[eax]; pop ebx; pop esi; pop edi; ret
0x804811b: and al,0xc; mov eax,[esp+0xc]; add esp,0x10; pop ebx; ret
0x80481cd: push esp; and al,0x8; mov ebx,edx; int 0x80; pop ebx; ret
0x80480f7: add [edi],ecx; mov dh,0x12; add edx,0x1; mov [eax],dl; ret
0x80483bd: add al,0xb8; add [eax],al; add [eax],al; add esp,0x10; ret
0x804811c: or al,0x8b; inc esp; and al,0xc; add esp,0x10; pop ebx; ret
0x8048177: and al,0x10; mov eax,[esp+0x10]; add esp,0x14; pop ebx; ret
0x80480f5: add edx,0x1; movzx edx,[edx]; add edx,0x1; mov [eax],dl; ret
0x80481b9: add [eax+eax*8+0x448bd175],al; and al,0xc; add esp,0x10; ret
0x80481bc: jne 0x804818f <puts+13>; mov eax,[esp+0xc]; add esp,0x10; ret
0x8048312: mov eax,[esp+0xc]; add esp,0x10; pop ebx; pop esi; pop edi; ret
0x804834e: push ss; call 0x80482ed <prctl>; add esp,0x14; mov eax,0x0; ret
0x8048118: or [ecx-0x74f3dbbc],0x44; and al,0xc; add esp,0x10; pop ebx; ret
0x8048119: mov [esp+0xc],eax; mov eax,[esp+0xc]; add esp,0x10; pop ebx; ret
0x804834d: push 0x16; call 0x80482ed <prctl>; add esp,0x14; mov eax,0x0; ret
0x8048174: or [ecx-0x74efdbbc],0x44; and al,0x10; add esp,0x14; pop ebx; ret
0x8048244: push 0xa; call 0x804814d <putchar>; add esp,0x4; add esp,0x10; ret
0x8048175: mov [esp+0x10],eax; mov eax,[esp+0x10]; add esp,0x14; pop ebx; ret
0x80483b6: call 0x8048182 <puts>; add esp,0x4; mov eax,0x0; add esp,0x10; ret
0x804811a: inc esp; and al,0xc; mov eax,[esp+0xc]; add esp,0x10; pop ebx; ret
0x80483bc: les eax,[eax+edi*4]; add [eax],al; add [eax],al; add esp,0x10; ret
0x80481d7: mov eax,0x1; mov edx,[esp+0x8]; mov ebx,edx; int 0x80; pop ebx; ret
0x80482de: add [esi-0x24],bh; call 0x8048252 <read_input>; add esp,0x4e30; ret
0x80481c7: mov eax,0x6; mov edx,[esp+0x8]; mov ebx,edx; int 0x80; pop ebx; ret
0x80481ca: add [eax],al; mov edx,[esp+0x8]; mov ebx,edx; int 0x80; pop ebx; ret
0x8048176: inc esp; and al,0x10; mov eax,[esp+0x10]; add esp,0x14; pop ebx; ret
0x80482a0: jne 0x8048264 <read_input+18>; mov eax,[esp+0x10]; add esp,0x20; ret
0x80480f3: and al,0x4; add edx,0x1; movzx edx,[edx]; add edx,0x1; mov [eax],dl; ret
0x804834c: add ch,[edx+0x16]; call 0x80482ed <prctl>; add esp,0x14; mov eax,0x0; ret
0x80481ba: test al,al; jne 0x804818f <puts+13>; mov eax,[esp+0xc]; add esp,0x10; ret
0x8048117: int 0x80; mov [esp+0xc],eax; mov eax,[esp+0xc]; add esp,0x10; pop ebx; ret
0x804834b: push 0x2; push 0x16; call 0x80482ed <prctl>; add esp,0x14; mov eax,0x0; ret
0x8048116: add ch,cl; or [ecx-0x74f3dbbc],0x44; and al,0xc; add esp,0x10; pop ebx; ret
0x8048173: int 0x80; mov [esp+0x10],eax; mov eax,[esp+0x10]; add esp,0x14; pop ebx; ret
0x8048172: add ch,cl; or [ecx-0x74efdbbc],0x44; and al,0x10; add esp,0x14; pop ebx; ret
0x8048240: inc [ebx+0xa6a04c4]; call 0x804814d <putchar>; add esp,0x4; add esp,0x10; ret
0x80483b4: add al,0x8; call 0x8048182 <puts>; add esp,0x4; mov eax,0x0; add esp,0x10; ret
0x80480f1: mov edx,[esp+0x4]; add edx,0x1; movzx edx,[edx]; add edx,0x1; mov [eax],dl; ret
0x8048241: add esp,0x4; push 0xa; call 0x804814d <putchar>; add esp,0x4; add esp,0x10; ret
0x804829e: test eax,eax; jne 0x8048264 <read_input+18>; mov eax,[esp+0x10]; add esp,0x20; ret
0x80482dc: adc eax,[eax]; add [esi-0x24],bh; call 0x8048252 <read_input>; add esp,0x4e30; ret
0x80483b1: push 0x804845c; call 0x8048182 <puts>; add esp,0x4; mov eax,0x0; add esp,0x10; ret
0x80482df: jle 0x80482bd <alloc_big_stack+19>; call 0x8048252 <read_input>; add esp,0x4e30; ret
0x80481b8: mov dh,0x0; test al,al; jne 0x804818f <puts+13>; mov eax,[esp+0xc]; add esp,0x10; ret
0x80483b3: test [eax+ecx*1],al; call 0x8048182 <puts>; add esp,0x4; mov eax,0x0; add esp,0x10; ret
0x80481b7: movzx eax,[eax]; test al,al; jne 0x804818f <puts+13>; mov eax,[esp+0xc]; add esp,0x10; ret
0x8048349: add [eax+0x6a],dl; add ch,[edx+0x16]; call 0x80482ed <prctl>; add esp,0x14; mov eax,0x0; ret
0x804829c: and al,0xc; test eax,eax; jne 0x8048264 <read_input+18>; mov eax,[esp+0x10]; add esp,0x20; ret
0x80482dd: add [eax],al; jle 0x80482bd <alloc_big_stack+19>; call 0x8048252 <read_input>; add esp,0x4e30; ret
0x804829a: mov eax,[esp+0xc]; test eax,eax; jne 0x8048264 <read_input+18>; mov eax,[esp+0x10]; add esp,0x20; ret
0x80482db: xchg [ebx],edx; add [eax],al; jle 0x80482bd <alloc_big_stack+19>; call 0x8048252 <read_input>; add esp,0x4e30; ret
